# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.tipo_certificado:
        class: App\Admin\TipoCertificadoAdmin
        arguments: [~, App\Entity\TipoCertificado, App\Controller\TipoCertificadoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: TipoCertificado }
        public: true

    admin.certificado:
        class: App\Admin\CertificadoAdmin
        arguments: [~, App\Entity\Certificado, App\Controller\CertificadoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Certificado }
        public: true

    admin.tipo_evento:
        class: App\Admin\TipoEventoAdmin
        arguments: [~, App\Entity\TipoEvento, App\Controller\TipoEventoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: TipoEvento }
        public: true

    admin.evento:
        class: App\Admin\EventoAdmin
        arguments: [~, App\Entity\Evento, App\Controller\EventoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Evento }
        public: true
        calls:
            - [ addChild, ["@admin.inscripto"]] 
            - [ addChild, ["@admin.certificado_evento"]]

    admin.template:
        class: App\Admin\TemplateAdmin
        arguments: [~, App\Entity\Template, App\Controller\TemplateAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Template }
        public: true

    admin.certificado_evento:
        class: App\Admin\CertificadoEventoAdmin
        arguments: [~, App\Entity\CertificadoEvento, App\Controller\CertificadoEventoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: CertificadoEvento }
        public: true
        calls:
            - [ addChild, ["@admin.certificado_evento_requisito"]] 
        

    admin.persona:
        class: App\Admin\PersonaAdmin
        arguments: [~, App\Entity\Persona, App\Controller\PersonaAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Persona }
        public: true

    admin.inscripto:
        class: App\Admin\InscriptoAdmin
        arguments: [~, App\Entity\Inscripto, App\Controller\InscriptoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Inscripto }
        public: true
        calls:
            - [ addChild, ["@admin.inscripto_evento_requisito"]] 
            - [ addChild, ["@admin.inscripto_certificado"]] 

    admin.requisito:
        class: App\Admin\RequisitoAdmin
        arguments: [~, App\Entity\Requisito, App\Controller\RequisitoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Requisito }
        public: true

    admin.certificado_evento_requisito:
        class: App\Admin\CertificadoEventoRequisitoAdmin
        arguments: [~, App\Entity\CertificadoEventoRequisito, App\Controller\CertificadoEventoRequisitoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: CertificadoEventoRequisito }
        public: true

    admin.inscripto_evento_requisito:
        class: App\Admin\InscriptoEventoRequisitoAdmin
        arguments: [~, App\Entity\InscriptoEventoRequisito, App\Controller\InscriptoEventoRequisitoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: InscriptoEventoRequisito }
        public: true

    admin.inscripto_certificado:
        class: App\Admin\InscriptoCertificadoAdmin
        arguments: [~, App\Entity\InscriptoCertificado, App\Controller\InscriptoCertificadoAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: InscriptoCertificado }
        public: true
        
    my.inscriptocertificadosubscriber:
        class: App\EventListener\InscriptoCertificadoSubscriber
        arguments: ['@service_container']
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        
#
# INLINE VALIDATION SERVICES
#

    app.inlinevalidator.inscripto_certificado:
        class: App\Validator\InscriptoCertificadoInlineValidator
        public: true

        